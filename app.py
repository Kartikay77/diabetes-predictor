# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P2LOeBr-2Tz59orrnA89tgAvJ8P5AMYY
"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd
import re

# Load the model
model = joblib.load("xgboost_diabetes_model.pkl")
st.title("Diabetes Prediction System")

st.header("Option 1: Fill out patient information manually")

# --- Manual Input Form ---
age = st.number_input("Age", min_value=0, max_value=120, value=30)
bmi = st.number_input("BMI", value=22.5)
hba1c = st.number_input("HbA1c Level", value=5.6)
glucose = st.number_input("Blood Glucose Level", value=100.0)
hypertension = st.selectbox("Hypertension", [0, 1])
heart_disease = st.selectbox("Heart Disease", [0, 1])
gender = st.selectbox("Gender", ["Male", "Female"])
smoking = st.selectbox("Smoking History", ["never", "former", "current", "No Info", "not current", "ever"])

# One-hot encoding
gender_male = int(gender == "Male")
gender_female = int(gender == "Female")
gender_other = 0

smoke_never = int(smoking == "never")
smoke_former = int(smoking == "former")
smoke_current = int(smoking == "current")
smoke_noinfo = int(smoking == "No Info")
smoke_notcurrent = int(smoking == "not current")
smoke_ever = int(smoking == "ever")

# DataFrame
columns = [
    'age', 'bmi', 'HbA1c_level', 'blood_glucose_level',
    'hypertension', 'heart_disease',
    'gender_female', 'gender_male', 'gender_other',
    'smoking_never', 'smoking_former', 'smoking_current',
    'smoking_noinfo', 'smoking_notcurrent', 'smoking_ever'
]

manual_input = [[
    age, bmi, hba1c, glucose,
    hypertension, heart_disease,
    gender_female, gender_male, gender_other,
    smoke_never, smoke_former, smoke_current,
    smoke_noinfo, smoke_notcurrent, smoke_ever
]]

df_manual = pd.DataFrame(manual_input, columns=columns)

if st.button("Predict (Manual)"):
    prob = model.predict_proba(df_manual)[0][1] * 100  # Probability of class 1
    if prob >= 40:
        st.error(f"You are likely diabetic with {prob:.1f}% confidence.")
    else:
        st.success(f"You are not diabetic. Risk is {prob:.1f}%.")

# --- Agentic AI Input ---
st.markdown("---")
st.header("Option 2: Paste natural language prompt")

prompt = st.text_area("Enter description (e.g., 'I'm a 30-year-old male. BMI is 25. HbA1c is 5.2...')")

if st.button("Predict (Natural Language)"):
    try:
        age = int(re.search(r"(\d+)-year-old", prompt).group(1))
        bmi = float(re.search(r"BMI(?: is)? ([\d.]+)", prompt).group(1))
        hba1c = float(re.search(r"HbA1c(?: is)? ([\d.]+)", prompt).group(1))
        glucose = float(re.search(r"glucose(?: is)? ([\d.]+)", prompt).group(1))

        gender_male = int("male" in prompt.lower())
        gender_female = int("female" in prompt.lower())
        gender_other = 0

        hypertension = int("no hypertension" not in prompt.lower())
        heart_disease = int("no heart disease" not in prompt.lower())

        smoking_options = ["never", "former", "current", "no info", "not current", "ever"]
        smoking_encoded = [int(opt in prompt.lower()) for opt in smoking_options]

        agent_input = [[
            age, bmi, hba1c, glucose,
            hypertension, heart_disease,
            gender_female, gender_male, gender_other
        ] + smoking_encoded]

        df_agent = pd.DataFrame(agent_input, columns=columns)

        # prediction = model.predict(df_agent)[0]
        # prob = model.predict_proba(df_agent)[0][1] * 100
        prob = model.predict_proba(df_agent)[0][1] * 100
        if prob >= 40:
            st.error(f"[Agentic AI] You are likely diabetic with {prob:.1f}% confidence.")
        else:
            st.success(f"[Agentic AI] You are not diabetic. Risk is {prob:.1f}%.")
    except Exception as e:
        st.warning(f"Could not parse input properly. Error: {e}")